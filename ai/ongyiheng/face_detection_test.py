# -*- coding: utf-8 -*-
"""Face Detection Test

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1bTQ8Ju6NqFNFGGZ_KzdFvWAZ9H1SjwIr
"""

# Commented out IPython magic to ensure Python compatibility.
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
import pandas as pd
# %matplotlib inline

column_features = ['Forehead_width','Cheeks_width','Jawline_length','Face_length','Face_Type']

df = pd.read_csv('/content/faces_data.csv', names=column_features) #Read CSV file imported

df.head(5) #Show Data

face_type_count = len(df[df["Face_Type"]=="square"])

print(face_type_count) #find number of people with certain face type

sns.pairplot(df, hue='Face_Type') #Plot prepared data using seaborn

data = df.values
X = data[:,0:4]
Y = data[:,4]
m = df.corr()
sns.heatmap(m, annot=True)

Y_Data = np.array([np.average(X[:, i][Y==j].astype('float32')) for i in range (X.shape[1]) for j in (np.unique(Y))])    # add comments here
Y_Data_reshaped = Y_Data.reshape(4,6)
Y_Data_reshaped = np.swapaxes(Y_Data_reshaped, 0, 1)
X_axis = np.arange(len(column_features)-1)
width = 0.1

plt.bar(X_axis, Y_Data_reshaped[0], width, label = 'square')
plt.bar(X_axis+width, Y_Data_reshaped[1], width, label = 'diamond')
plt.bar(X_axis+width*2, Y_Data_reshaped[2], width, label = 'triangle')
plt.bar(X_axis+width*3, Y_Data_reshaped[2], width, label = 'oblong')
plt.bar(X_axis+width*4, Y_Data_reshaped[2], width, label = 'oval')
plt.bar(X_axis+width*5, Y_Data_reshaped[2], width, label = 'heart')
plt.xticks(X_axis, column_features[:4])
plt.xlabel("Features")
plt.ylabel("Values")
plt.legend(bbox_to_anchor=(1.3,1))
plt.show()

from sklearn.model_selection import train_test_split
X_train, X_test, y_train, y_test = train_test_split(X, Y, test_size=0.3)

from sklearn.tree import DecisionTreeClassifier
dt = DecisionTreeClassifier()
dt.fit(X_train, y_train)

predictions = dt.predict(X_test)

from sklearn.metrics import accuracy_score
accuracy_score(y_test, predictions)

from sklearn.metrics import classification_report
print(classification_report(y_test, predictions))

classification_report(y_test, predictions).split('\n')

X_new = np.array([[13.73, 12.36, 17.24,18],[11, 11, 13,18],[15, 15, 17.24,15],[12.92,12.43, 14.88,20.88],[11.81, 12.93, 12.82,17.47]])

prediction = dt.predict(X_new)
print("Prediction of Face type: {}".format(prediction))